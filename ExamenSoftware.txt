								INGENIERIA INVERSA
	Es el proceso de descubrir los principios tecnológicos de un objeto, herramienta, dispositivo o sistema, mediante el razonamiento adictivo 
(haciendo conjeturas) de su estructura, función y operación. Dicho de otra manera, se trata de tomar algo, por ejemplo un dispositivo mecánico o electrónico, 
para analizar su funcionamiento en detalle, con el objetivo de crear un dispositivo que haga la misma tarea o una similar sin copiar los detalles del original.

OBJETIVO
	La ingeniería inversa persigue el objetivo de obtener la mayor cantidad de información técnica de un producto, del cual no se tiene la más mínima información 
técnica de su diseño, construcción y funcionamiento, de modo que se debe partir de un todo para comprender cada pieza del sistema, para lo cual se deben tomar 
notas muy detalladas.

ANTECEDENTES
	La ingeniería inversa es una rama de la ingeniería relativamente reciente, cuyos orígenes se remontan a la Segunda Guerra Mundial, 
cuando alguno de los dos bandos (Aliados y Potencias del Eje) capturaba maquinaria o equipo del otro bando, 
entonces se disponían a conocer hasta el más mínimo detalle de la tecnología del enemigo con el objetivo de encontrar fallas o puntos débiles que 
les brindarán cierta ventaja.


USOS
	La ingeniería inversa tiene muchas aplicaciones en el mundo actual y es aplicada por todo tipo de empresas, de todos los ámbitos tecnológicos. 
Algunos de los usos principales son:
-Investigar, analizar y comprender la tecnología utilizada por otras naciones o por otras empresas.
-Analizar los productos de la competencia para analizar sin infringen alguna patente de otra empresa.
-Desarrollar productos que sean compatibles con otros productos, sin tener acceso a los detalles técnicos de estos últimos.
-Comprobar la seguridad de un producto, en informática por ejemplo, para conocer las brechas de seguridad que puede tener un programa.

DIVISION
	Actualmente la ingeniería inversa se divide en dos grandes vertientes: ingeniería inversa de producto e ingeniería inversa de software; 
en la primera entran todos aquellos productos físicos tales como máquinas, componentes electrónicos, dispositivos, etc., y en la segunda protocolos, 
códigos de programación, aplicaciones digitales, etc. No es una definición completamente establecida pero es la más aceptada actualmente.

¿Ingeniería inversa?
Las tareas habituales de la ingeniería implican seguir la dirección de lo específico a lo general, pero la ingeniería inversa indica que 
las labores deben realizarse siguiendo la dirección opuesta, de lo general a lo específico, algo poco común para los ingenieros, 
que implica invertir el modo de pensamiento y que sin duda es un gran ejercicio de pensamiento además que es una habilidad de mucha importancia hoy en día.

¿Método de aprendizaje?
La ingeniería inversa no es un método de solución sino más bien de aprendizaje, como implica analizar un objeto hasta el punto de comprender cada uno de 
sus componentes y sus funciones entonces la cantidad de conocimientos obtenida será bastante, pero solo hemos aprendido, 
para solucionar el problema deberemos aplicar lo aprendido y comenzar de cero nuevamente.

¿Problemas legales?
Si se sigue un proceso de ingeniería inversa bien establecido no tiene por qué haber ningún problema legal; esto implica cumplir al pie de la letra 
el objetivo de la ingeniería inversa: obtener un producto que haga lo mismo pero que sea nuevo, que no aplique los mismos principios de funcionamiento del
producto analizado; es decir, la ingeniería inversa se debe utilizar solamente para conocer un producto, con el fin de hacer uno que haga lo mismo pero de otro modo.



								MANTENIMIENTO DE SOFTWARE
	Es la modificación de un producto de software después de la entrega, para corregir errores, mejorar el rendimiento, u otros atributos. 
El mantenimiento del software es una de las actividades más comunes en la ingeniería de software.

	El mantenimiento de software es también una de las fases en el ciclo de vida de desarrollo de sistemas, que se aplica al desarrollo de software.
La fase de mantenimiento es la fase que viene después del despliegue (implementación) del software en el campo.Los problemas claves de mantenimiento 
de software son administrativos y técnicos. Problemas clave de administración son: alineación con las prioridades del cliente, dotación de personal, 
cuál organización hace mantenimiento, estimación de costos. Son cuestiones técnicas claves: limitado entendimiento, análisis de impacto, pruebas (testing), 
medición de mantenibilidad.

	El mantenimiento de software es una actividad muy amplia que incluye la corrección de errores, mejoras de las capacidades, eliminación de funciones obsoletas 
y optimización. Debido a que el cambio es inevitable, se debe desarrollar mecanismos para la evaluación, controlar y hacer modificaciones.

 Clasificacion de actividades de mantenimiento en cuatro clases:

	Adaptable – modificar el sistema para hacer frente a cambios en el ambiente del software (DBMS, OS)
	Perfectivo – implementar nuevos, o cambiar requerimientos de usuario referentes a mejoras funcionales para el software
	Correctivo, diagnosticar y corregir errores, posiblemente los encontraron por los usuarios
	Preventiva – aumentar la capacidad de mantenimiento de software o fiabilidad para evitar problemas en el futuro

FASE DE MANTENIMIENTO

	La fase de mantenimiento de software involucra cambios al software para corregir defectos encontrados durante su uso o la adición de nueva 
funcionalidad mejorando la usabilidad y aplicabilidad del software. El mantenimiento del software involucra diferentes técnicas específicas. 
Una técnica es el rebanamiento estático, la cual es usada para identificar todo el código de programa que puede modificar alguna variable.

	La fase de mantenimiento de software es una parte explícita del modelo en cascada del proceso de desarrollo de software el cual fue desarrollado 
durante el movimiento de programación estructurada en computadores. El otro gran modelo, el Desarrollo en espiral desarrollado durante el movimiento de 
ingeniería de software orientada a objeto no hace una mención explícita de la fase de mantenimiento. Sin embargo, esta actividad es notable, considerando el 
hecho de que dos tercios del coste del tiempo de vida de un sistema de software involucran mantenimiento.

MANTENIMIENTO PREVENTIVO DEL SOFTWARE

	El mantenimiento preventivo consiste en una atención constante de limpieza, revisión y afinación de los distintos elementos integrantes 
de un equipo de cómputo. Es importante saber que la mayoría de los problemas que se presentan en el trabajo cotidiano, se debe a la falta de un programa 
específico de mantenimiento de los equipos, de tal manera que la mayoría de los problemas se resuelven con el mismo procedimiento del mantenimiento preventivo. 
El mantenimiento tiene técnicas para darle un periodo de vida útil más largo y libre de fallas. Debemos de tener en cuenta que es necesario darle mantenimiento
al software ya que el continuo uso genera una serie de cambios en la configuración original del sistema, causando bajas en el rendimiento que al acumularse 
con el tiempo pueden generar problemas serios. Actualmente es indispensable mantener actualizada la protección contra virus informáticos.

TIPOS DE ACTIVIDADES
 Basili et al. [1996] identifican las siguientes once actividades, que se realizan con cada modificación del software:
	-Análisis de impacto y de costes/beneficios: se dedica esta actividad a analizar diferentes alternativas de implementación y/o a comprobar su 
						     impacto en la planificación, coste y facilidad de operación.
	-Comprensión del cambio: puede consistir en localizar el error y determinar su causa, o en comprender los requisitos de una mejora solicitada.
	-Diseño del cambio: se refiere al diseño propuesto para el cambio, pudiéndose incluir un rediseño del sistema.
	-Codificación y pruebas unitarias: se codifica y prueba el funcionamiento de cada componente modificado.
	-Inspección, certificación y consultoría: esta actividad se dedica a inspeccionar el cambio, comprobar otros diseños, reuniones de inspección, etc.
	-Pruebas de integración: se refiere a comprobar la integración de los componentes modificados con el resto del sistema.
	-Pruebas de aceptación: en esta actividad, el usuario comprueba, junto al personal encargado del mantenimiento, la adecuación del cambio a sus necesidades.
	-Pruebas de regresión: en esta actividad se somete el software modificado a casos de pruebas previamente almacenados y por los que ya pasó.
	-Documentación del sistema: se revisa y reescribe, en caso necesario, la documentación del sistema para que se ajuste al producto software ya modificado.
	-Otra documentación (del usuario, por ejemplo): se revisa y reescribe, en caso necesario, los diferentes manuales de usuario y otra documentación, 
							excepto la documentación del sistema.
	-Otras actividades, como las dedicadas a la gestión del proyecto de mantenimiento.

			Evolucion del software
Introducción
El Software representa la vida interna de un computador, el manejo y aprovechamiento del mismo y todas las ventajas que se brindan el mundo de las computadoras,
depende del software, facilitando a los usuarios el desarrollo de programas que contribuyen con tareas diarias tanto personales como generales, empresariales 
y organizacionales el software en sus diferentes tipos es el elemento esencial como interfaz entre usuario - computador, su historia desde un principio se muestra
con poca atención pero con el paso del tiempo se ha tornado importante para los programadores y creadores de sistemas tanto de aplicación como operativos, 
todo lo que se ve digitalizado en un computador representa el software clasificado de alguna forma, las herramientas del menú inicio y todas aquellas que se 
despliegan al encendido del CPU, el desarrollo de esta herramienta ha permitido innovar en cuanto a la robótica he inteligencia artificial facilitando el trabajo en 
determinadas áreas laborales y agilizando las mismas por ejemplo en la fabricación de vehículos mediante software de programación se diseñan estructuras robóticas 
inmensas y fuertes que realizan tareas que al brazo humano le tomarían mas tiempo.
Reseña Histórica del Software
En 1990 La crisis del software se fundamentó en el tiempo de creación de software, ya que en la creación del mismo no se obtenían los resultados deseados,
además de un gran costo y poca flexibilidad.
Es un término informático acuñado en 1968, en la primera conferencia organizada por la OTAN sobre desarrollo de software, de la cual nació formalmente la 
rama de la ingeniería de software. El término se adjudica a F. L. Bauer, aunque previamente había sido utilizado por Edsger Dijkstra en su obra The Humble 
Programmer.